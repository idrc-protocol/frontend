generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  emailVerified   Boolean   @default(false)
  image           String?
  username        String?   @unique
  displayUsername String?
  role            String    @default("user")
  kycVerified     Boolean   @default(false)
  applicantId     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  sessions        Session[]
  accounts        Account[]
  wallets         Wallet[]
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Wallet {
  id        String   @id @default(cuid())
  address   String
  chainId   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  chain Chain @relation(fields: [chainId], references: [id], onDelete: Cascade)

  @@unique([userId, chainId])
  @@unique([address, chainId])
}

model Chain {
  id          String   @id @default(cuid())
  name        String
  symbol      String
  network     String
  chainId     Int      @unique
  rpcUrl      String?
  explorerUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  wallets Wallet[]
}

model PriceFeed {
  id        String   @id @default(cuid())
  base      String
  target    String
  rate      Float
  date      String
  amount    Float    @default(1.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([base, target])
  @@index([base, target])
  @@index([updatedAt])
}

model ChartData {
  id        String   @id @default(cuid())
  symbol    String
  timeframe String
  timestamp BigInt
  open      Float
  high      Float
  low       Float
  close     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([symbol, timeframe, timestamp])
  @@index([symbol, timeframe])
  @@index([updatedAt])
}
