import React, { useEffect, useState } from "react";

import { ValidationStep } from "@/types/kyc.types";

const CardLoading = ({ props }: { [key: string]: any }) => (
  <svg
    height={140}
    preserveAspectRatio="xMidYMid meet"
    style={{
      width: "100%",
      height: "100%",
      transform: "translate3d(0px, 0px, 0px)",
      contentVisibility: "visible",
    }}
    viewBox="0 0 178 140"
    width={178}
    xmlns="http://www.w3.org/2000/svg"
    xmlnsXlink="http://www.w3.org/1999/xlink"
    {...props}
  >
    <defs>
      <clipPath id="__lottie_element_52">
        <rect height={140} width={178} x={0} y={0} />
      </clipPath>
      <clipPath id="__lottie_element_54">
        <path d="M0,0 L150,0 L150,35 L0,35z" />
      </clipPath>
      <clipPath id="__lottie_element_64">
        <path d="M0,0 L164,0 L164,104 L0,104z" />
      </clipPath>
    </defs>
    <g clipPath="url(#__lottie_element_52)">
      <g
        clipPath="url(#__lottie_element_64)"
        opacity={1}
        style={{
          display: "block",
        }}
        transform="matrix(0.75,0,0,0.75,27.5,31)"
      >
        <g
          opacity={1}
          style={{
            display: "block",
          }}
          transform="matrix(1,0,0,1,0,0)"
        >
          <g opacity={1} transform="matrix(1,0,0,1,82,52)">
            <path
              className="icon-color-background"
              d=" M-72,-50 C-72,-50 72,-50 72,-50 C76.41799926757812,-50 80,-46.417999267578125 80,-42 C80,-42 80,42 80,42 C80,46.417999267578125 76.41799926757812,50 72,50 C72,50 -72,50 -72,50 C-76.41799926757812,50 -80,46.417999267578125 -80,42 C-80,42 -80,-42 -80,-42 C-80,-46.417999267578125 -76.41799926757812,-50 -72,-50z"
              fill="rgb(255,255,255)"
              fillOpacity={1}
            />
          </g>
          <g
            opacity={1}
            transform="matrix(1,0,0,1,45.74300003051758,33.650001525878906)"
          >
            <path
              d=" M19.827999114990234,20.256000518798828 C19.827999114990234,20.256000518798828 19.93000030517578,20.23200035095215 19.93000030517578,20.23200035095215 C20.732999801635742,20.035999298095703 21.447999954223633,19.584999084472656 21.95800018310547,18.94700050354004 C22.466999053955078,18.30900001525879 22.743000030517578,17.523000717163086 22.743000030517578,16.71299934387207 C22.743000030517578,15.045999526977539 21.58300018310547,13.595999717712402 19.93000030517578,13.194000244140625 C19.93000030517578,13.194000244140625 19.827999114990234,13.168000221252441 19.827999114990234,13.168000221252441 C19.827999114990234,13.168000221252441 19.827999114990234,20.256000518798828 19.827999114990234,20.256000518798828z M6.124000072479248,-0.9470000267028809 C6.124000072479248,-0.9470000267028809 8.52299976348877,-3.490000009536743 8.52299976348877,-3.490000009536743 C8.52299976348877,-3.490000009536743 8.890999794006348,-3.431999921798706 8.890999794006348,-3.431999921798706 C11.255999565124512,-3.063999891281128 13.437999725341797,-1.968000054359436 15.12399959564209,-0.3050000071525574 C16.809999465942383,1.3580000400543213 17.910999298095703,3.503999948501587 18.266000747680664,5.820000171661377 C18.266000747680664,5.820000171661377 19.04599952697754,10.91100025177002 19.04599952697754,10.91100025177002 C19.04599952697754,10.91100025177002 19.827999114990234,16.003999710083008 19.827999114990234,16.003999710083008 C21.149999618530273,9.690999984741211 20.785999298095703,4.729000091552734 18.733999252319336,1.1169999837875366 C18.459999084472656,-4.814000129699707 15.178999900817871,-8.831999778747559 8.888999938964844,-10.932000160217285 C5.050000190734863,-20.2549991607666 -9.54800033569336,-17.209999084472656 -15.621999740600586,-8.734000205993652 C-18.625,-4.543000221252441 -19.988000869750977,1.0750000476837158 -19.711999893188477,8.118000030517578 C-19.615999221801758,10.574000358581543 -19.320999145507812,13.20199966430664 -18.82699966430664,16.003999710083008 C-18.82699966430664,16.003999710083008 -17.16699981689453,6.442999839782715 -17.16699981689453,6.442999839782715 C-16.98900032043457,5.421000003814697 -16.57699966430664,4.453000068664551 -15.960000038146973,3.6110000610351562 C-15.343000411987305,2.7690000534057617 -14.538000106811523,2.075000047683716 -13.604999542236328,1.5829999446868896 C-12.67300033569336,1.090000033378601 -11.637999534606934,0.8109999895095825 -10.579000473022461,0.7680000066757202 C-9.520000457763672,0.7239999771118164 -8.465999603271484,0.9190000295639038 -7.494999885559082,1.3329999446868896 C-7.494999885559082,1.3329999446868896 -6.672999858856201,1.6820000410079956 -6.672999858856201,1.6820000410079956 C-4.525000095367432,2.5999999046325684 -2.13700008392334,2.8399999141693115 0.15600000321865082,2.36899995803833 C2.450000047683716,1.8980000019073486 4.534999847412109,0.7379999756813049 6.124000072479248,-0.9470000267028809z M-19.82699966430664,20.256000518798828 C-20.66200065612793,20.06599998474121 -21.417999267578125,19.618999481201172 -21.95599937438965,18.94700050354004 C-22.465999603271484,18.30900001525879 -22.743000030517578,17.523000717163086 -22.743000030517578,16.71299934387207 C-22.743000030517578,15.045999526977539 -21.479999542236328,13.571000099182129 -19.82699966430664,13.168000221252441 C-19.82699966430664,13.168000221252441 -19.82699966430664,20.256000518798828 -19.82699966430664,20.256000518798828z"
              fill="rgb(241,235,255)"
              fillOpacity={1}
            />
          </g>
          <g
            opacity={1}
            transform="matrix(1,0,0,1,45.402000427246094,73.63899993896484)"
          >
            <path
              d=" M-9.845999717712402,-3.7839999198913574 C-9.845999717712402,-3.7839999198913574 -9.845999717712402,0.11299999803304672 -9.845999717712402,0.11299999803304672 C-9.845999717712402,0.11299999803304672 -9.484999656677246,0.41499999165534973 -9.484999656677246,0.41499999165534973 C-6.7789998054504395,2.678999900817871 -3.321000099182129,3.8980000019073486 0.23899999260902405,3.8420000076293945 C3.7990000247955322,3.7860000133514404 7.216000080108643,2.4609999656677246 9.845999717712402,0.11299999803304672 C9.845999717712402,0.11299999803304672 9.845999717712402,-3.430000066757202 9.845999717712402,-3.430000066757202 C9.845999717712402,-3.430000066757202 9.845999717712402,-3.8959999084472656 9.845999717712402,-3.8959999084472656 C9.845999717712402,-3.8959999084472656 7.764999866485596,-2.6019999980926514 7.764999866485596,-2.6019999980926514 C5.445000171661377,-1.156000018119812 2.750999927520752,-0.3880000114440918 0,-0.3880000114440918 C-2.750999927520752,-0.3880000114440918 -5.445000171661377,-1.156000018119812 -7.764999866485596,-2.6019999980926514 C-7.764999866485596,-2.6019999980926514 -9.845999717712402,-3.8980000019073486 -9.845999717712402,-3.8980000019073486 C-9.845999717712402,-3.8980000019073486 -9.845999717712402,-3.7839999198913574 -9.845999717712402,-3.7839999198913574z"
              fill="rgb(241,235,255)"
              fillOpacity={1}
            />
          </g>
          <g
            opacity={1}
            transform="matrix(1,0,0,1,45.35300064086914,51.707000732421875)"
          >
            <path
              className="icon-color-background"
              d=" M-19.437000274658203,-4.888999938964844 C-19.437000274658203,-4.888999938964844 -19.27899932861328,2.0480000972747803 -19.27899932861328,2.0480000972747803 C-19.27899932861328,5.13700008392334 -18.482999801635742,8.175000190734863 -16.964000701904297,10.883000373840332 C-15.446000099182129,13.590999603271484 -13.253999710083008,15.880000114440918 -10.590999603271484,17.540000915527344 C-10.590999603271484,17.540000915527344 -9.79699993133545,18.03499984741211 -9.79699993133545,18.03499984741211 C-9.79699993133545,18.03499984741211 -7.716000080108643,19.33099937438965 -7.716000080108643,19.33099937438965 C-5.395999908447266,20.777000427246094 -2.7019999027252197,21.54599952697754 0.04899999871850014,21.54599952697754 C2.799999952316284,21.54599952697754 5.49399995803833,20.777000427246094 7.814000129699707,19.33099937438965 C7.814000129699707,19.33099937438965 9.895000457763672,18.03499984741211 9.895000457763672,18.03499984741211 C9.895000457763672,18.03499984741211 10.690999984741211,17.540000915527344 10.690999984741211,17.540000915527344 C13.354000091552734,15.880000114440918 15.545000076293945,13.59000015258789 17.062999725341797,10.881999969482422 C18.58099937438965,8.175000190734863 19.37700080871582,5.13700008392334 19.37700080871582,2.0480000972747803 C19.37700080871582,2.0480000972747803 19.37700080871582,-1.343999981880188 19.37700080871582,-1.343999981880188 C19.37700080871582,-1.343999981880188 19.37700080871582,-6.307000160217285 19.37700080871582,-6.307000160217285 C19.37700080871582,-6.307000160217285 19.437000274658203,-7.144999980926514 19.437000274658203,-7.144999980926514 C19.437000274658203,-7.144999980926514 18.6560001373291,-12.236000061035156 18.6560001373291,-12.236000061035156 C18.301000595092773,-14.552000045776367 17.201000213623047,-16.69700050354004 15.515000343322754,-18.361000061035156 C13.829000473022461,-20.02400016784668 11.645999908447266,-21.1200008392334 9.281000137329102,-21.488000869750977 C9.281000137329102,-21.488000869750977 8.913000106811523,-21.54599952697754 8.913000106811523,-21.54599952697754 C8.913000106811523,-21.54599952697754 6.514999866485596,-19.003000259399414 6.514999866485596,-19.003000259399414 C4.926000118255615,-17.31800079345703 2.8399999141693115,-16.159000396728516 0.5460000038146973,-15.687999725341797 C-1.746999979019165,-15.217000007629395 -4.133999824523926,-15.456000328063965 -6.2820000648498535,-16.374000549316406 C-6.2820000648498535,-16.374000549316406 -7.105000019073486,-16.722999572753906 -7.105000019073486,-16.722999572753906 C-8.076000213623047,-17.13800048828125 -9.130000114440918,-17.33099937438965 -10.189000129699707,-17.288000106811523 C-11.248000144958496,-17.2450008392334 -12.281999588012695,-16.966999053955078 -13.21399974822998,-16.475000381469727 C-14.147000312805176,-15.982000350952148 -14.95199966430664,-15.286999702453613 -15.569000244140625,-14.444999694824219 C-16.18600082397461,-13.602999687194824 -16.599000930786133,-12.633999824523926 -16.777000427246094,-11.61299991607666 C-16.777000427246094,-11.61299991607666 -18.437000274658203,-2.052999973297119 -18.437000274658203,-2.052999973297119 C-18.930999755859375,-4.854000091552734 -19.22599983215332,-7.484000205993652 -19.32200050354004,-9.939000129699707 C-19.32200050354004,-9.939000129699707 -19.437000274658203,-4.888999938964844 -19.437000274658203,-4.888999938964844z"
              fill="rgb(241,235,255)"
              fillOpacity={1}
            />
          </g>
        </g>
        <g
          opacity={1}
          style={{
            display: "block",
          }}
          transform="matrix(1,0,0,1,0,0)"
        >
          <g
            opacity={1}
            transform="matrix(1,0,0,1,45.349998474121094,50.0890007019043)"
          >
            <path
              className="icon-color-primary"
              d=" M5.624000072479248,-17.385000228881836 C4.034999847412109,-15.699999809265137 1.9500000476837158,-14.541000366210938 -0.3440000116825104,-14.069999694824219 C-2.638000011444092,-13.598999977111816 -5.025000095367432,-13.84000015258789 -7.172999858856201,-14.756999969482422 C-7.172999858856201,-14.756999969482422 -7.994999885559082,-15.104999542236328 -7.994999885559082,-15.104999542236328 C-8.965999603271484,-15.520000457763672 -10.020999908447266,-15.71399974822998 -11.079000473022461,-15.670999526977539 C-12.137999534606934,-15.628000259399414 -13.17199993133545,-15.347999572753906 -14.104999542236328,-14.855999946594238 C-15.036999702453613,-14.36299991607666 -15.843000411987305,-13.668999671936035 -16.459999084472656,-12.82699966430664 C-17.077999114990234,-11.984999656677246 -17.489999771118164,-11.015999794006348 -17.66699981689453,-9.994999885559082 C-17.66699981689453,-9.994999885559082 -19.32699966430664,-0.4359999895095825 -19.32699966430664,-0.4359999895095825 C-21.23900032043457,-11.274999618530273 -20.17300033569336,-19.520999908447266 -16.121999740600586,-25.17300033569336 C-10.04800033569336,-33.650001525878906 4.550000190734863,-36.69499969482422 8.388999938964844,-27.371999740600586 C14.678999900817871,-25.270999908447266 17.961000442504883,-21.253999710083008 18.233999252319336,-15.321999549865723 C20.28700065612793,-11.710000038146973 20.649999618530273,-6.749000072479248 19.32699966430664,-0.4359999895095825 C19.32699966430664,-0.4359999895095825 17.766000747680664,-10.618000030517578 17.766000747680664,-10.618000030517578 C17.410999298095703,-12.934000015258789 16.309999465942383,-15.079000473022461 14.62399959564209,-16.743000030517578 C12.937999725341797,-18.4060001373291 10.755999565124512,-19.500999450683594 8.390999794006348,-19.868999481201172 C8.390999794006348,-19.868999481201172 8.020999908447266,-19.92799949645996 8.020999908447266,-19.92799949645996 C8.020999908447266,-19.92799949645996 5.624000072479248,-17.385000228881836 5.624000072479248,-17.385000228881836z M-27.350000381469727,25.062999725341797 C-9.416999816894531,20.48699951171875 9.416999816894531,20.48699951171875 27.350000381469727,25.062999725341797 C27.350000381469727,25.062999725341797 27.350000381469727,36.69499969482422 27.350000381469727,36.69499969482422 C27.350000381469727,36.69499969482422 -27.350000381469727,36.69499969482422 -27.350000381469727,36.69499969482422 C-27.350000381469727,36.69499969482422 -27.350000381469727,25.062999725341797 -27.350000381469727,25.062999725341797z"
              fill="rgb(170,133,255)"
              fillOpacity={1}
            />
          </g>
        </g>
        <g
          opacity={1}
          style={{
            display: "block",
          }}
          transform="matrix(1,0,0,1,0,0)"
        >
          <g
            opacity={1}
            transform="matrix(1,0,0,1,46.19200134277344,45.465999603271484)"
          >
            <path
              className="icon-color-stroke"
              d=" M39.58700180053711,-23.481000900268555 C39.58700180053711,-23.481000900268555 85.96299743652344,-23.481000900268555 85.96299743652344,-23.481000900268555 M39.58700180053711,-11.850000381469727 C39.58700180053711,-11.850000381469727 62.18199920654297,-11.850000381469727 62.18199920654297,-11.850000381469727 M39.58700180053711,-0.22100000083446503 C39.58700180053711,-0.22100000083446503 74.0719985961914,-0.22100000083446503 74.0719985961914,-0.22100000083446503 M82.39600372314453,36.99700164794922 C82.39600372314453,36.99700164794922 90.72000122070312,36.99700164794922 90.72000122070312,36.99700164794922 M56.236000061035156,36.99700164794922 C56.236000061035156,36.99700164794922 74.0719985961914,36.99700164794922 74.0719985961914,36.99700164794922 M77.63899993896484,27.69300079345703 C77.63899993896484,27.69300079345703 90.72000122070312,27.69300079345703 90.72000122070312,27.69300079345703 M65.7490005493164,27.69300079345703 C65.7490005493164,27.69300079345703 69.31600189208984,27.69300079345703 69.31600189208984,27.69300079345703 M49.099998474121094,27.69300079345703 C49.099998474121094,27.69300079345703 57.42399978637695,27.69300079345703 57.42399978637695,27.69300079345703 M-10.687999725341797,24.388999938964844 C-10.687999725341797,24.388999938964844 -10.687999725341797,28.28499984741211 -10.687999725341797,28.28499984741211 C-10.687999725341797,28.28499984741211 -10.32699966430664,28.589000701904297 -10.32699966430664,28.589000701904297 C-7.620999813079834,30.85300064086914 -4.163000106811523,32.071998596191406 -0.6029999852180481,32.01599884033203 C2.9570000171661377,31.959999084472656 6.373000144958496,30.632999420166016 9.003000259399414,28.28499984741211 C9.003000259399414,28.28499984741211 9.003000259399414,24.743000030517578 9.003000259399414,24.743000030517578 M-10.687999725341797,26.868999481201172 C-15.041000366210938,26.868999481201172 -18.527000427246094,27.488000869750977 -22.701000213623047,28.70199966430664 C-22.701000213623047,28.70199966430664 -27.350000381469727,30.05900001525879 -27.350000381469727,30.05900001525879 M9.845999717712402,26.868999481201172 C14.199000358581543,26.868999481201172 18.527000427246094,27.488000869750977 22.701000213623047,28.70199966430664 C22.701000213623047,28.70199966430664 27.350000381469727,30.05900001525879 27.350000381469727,30.05900001525879 M-20.32699966430664,1.3530000448226929 C-20.32699966430664,1.3530000448226929 -20.16900062561035,8.288000106811523 -20.16900062561035,8.288000106811523 C-20.16900062561035,11.37600040435791 -19.37299919128418,14.414999961853027 -17.854999542236328,17.121999740600586 C-16.336000442504883,19.829999923706055 -14.144000053405762,22.121000289916992 -11.482000350952148,23.7810001373291 C-11.482000350952148,23.7810001373291 -8.607000350952148,25.57200050354004 -8.607000350952148,25.57200050354004 C-6.2870001792907715,27.01799964904785 -3.5929999351501465,27.78499984741211 -0.8420000076293945,27.78499984741211 C1.909000039100647,27.78499984741211 4.604000091552734,27.01799964904785 6.923999786376953,25.57200050354004 C6.923999786376953,25.57200050354004 9.800999641418457,23.7810001373291 9.800999641418457,23.7810001373291 C12.463000297546387,22.121000289916992 14.654999732971191,19.829999923706055 16.17300033569336,17.121999740600586 C17.69099998474121,14.413999557495117 18.48699951171875,11.37600040435791 18.486000061035156,8.288000106811523 C18.486000061035156,8.288000106811523 18.486000061035156,-0.06599999964237213 18.486000061035156,-0.06599999964237213 M-20.32699966430664,1.3530000448226929 C-20.32699966430664,1.3530000448226929 -19.43000030517578,1.378000020980835 -19.43000030517578,1.378000020980835 C-21.08300018310547,1.781000018119812 -23.243000030517578,3.2300000190734863 -23.243000030517578,4.8979997634887695 C-23.243000030517578,5.706999778747559 -22.965999603271484,6.49399995803833 -22.45599937438965,7.13100004196167 C-21.91900062561035,7.803999900817871 -21.16200065612793,8.24899959564209 -20.32699966430664,8.439000129699707 C-20.32699966430664,8.439000129699707 -20.32699966430664,1.3530000448226929 -20.32699966430664,1.3530000448226929z M-20.16900062561035,4.8979997634887695 C-20.16900062561035,4.8979997634887695 -20.898000717163086,4.8979997634887695 -20.898000717163086,4.8979997634887695 M19.214000701904297,4.8979997634887695 C19.214000701904297,4.8979997634887695 18.486000061035156,4.8979997634887695 18.486000061035156,4.8979997634887695 M19.32699966430664,8.439000129699707 C19.32699966430664,8.439000129699707 19.43000030517578,8.416999816894531 19.43000030517578,8.416999816894531 C20.232999801635742,8.222000122070312 20.945999145507812,7.769000053405762 21.45599937438965,7.13100004196167 C21.965999603271484,6.49399995803833 22.243000030517578,5.706999778747559 22.243000030517578,4.8979997634887695 C22.243000030517578,3.2300000190734863 21.08300018310547,1.781000018119812 19.43000030517578,1.378000020980835 C19.43000030517578,1.378000020980835 19.32699966430664,1.3530000448226929 19.32699966430664,1.3530000448226929 C19.32699966430664,1.3530000448226929 19.32699966430664,8.439000129699707 19.32699966430664,8.439000129699707z M5.624000072479248,-12.76200008392334 C5.624000072479248,-12.76200008392334 8.020999908447266,-15.305000305175781 8.020999908447266,-15.305000305175781 C8.020999908447266,-15.305000305175781 8.390999794006348,-15.246000289916992 8.390999794006348,-15.246000289916992 C10.755999565124512,-14.878000259399414 12.937999725341797,-13.782999992370605 14.62399959564209,-12.119999885559082 C16.30900001525879,-10.456999778747559 17.410999298095703,-8.310999870300293 17.766000747680664,-5.995999813079834 C17.766000747680664,-5.995999813079834 19.32699966430664,4.188000202178955 19.32699966430664,4.188000202178955 C20.649999618530273,-2.125 20.285999298095703,-7.085999965667725 18.232999801635742,-10.699000358581543 C17.959999084472656,-16.6299991607666 14.678999900817871,-20.64900016784668 8.388999938964844,-22.749000549316406 C4.550000190734863,-32.071998596191406 -10.04800033569336,-29.025999069213867 -16.121999740600586,-20.549999237060547 C-20.172000885009766,-14.897000312805176 -21.239999771118164,-6.651000022888184 -19.32699966430664,4.188000202178955 C-19.32699966430664,4.188000202178955 -17.66699981689453,-5.372000217437744 -17.66699981689453,-5.372000217437744 C-17.489999771118164,-6.394000053405762 -17.07699966430664,-7.361999988555908 -16.459999084472656,-8.204999923706055 C-15.842000007629395,-9.04699993133545 -15.036999702453613,-9.741000175476074 -14.104999542236328,-10.232999801635742 C-13.17300033569336,-10.72599983215332 -12.137999534606934,-11.005000114440918 -11.079000473022461,-11.04800033569336 C-10.020999908447266,-11.090999603271484 -8.965999603271484,-10.897000312805176 -7.994999885559082,-10.482999801635742 C-7.994999885559082,-10.482999801635742 -7.172999858856201,-10.133999824523926 -7.172999858856201,-10.133999824523926 C-5.025000095367432,-9.215999603271484 -2.638000011444092,-8.97599983215332 -0.3440000116825104,-9.446999549865723 C1.9500000476837158,-9.918000221252441 4.034999847412109,-11.07699966430664 5.624000072479248,-12.76200008392334z"
              fillOpacity={0}
              stroke="rgb(25,0,82)"
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeOpacity={1}
              strokeWidth={2}
            />
          </g>
          <g opacity={1} transform="matrix(1,0,0,1,82,52)">
            <path
              className="icon-color-stroke"
              d=" M-72,-50 C-72,-50 72,-50 72,-50 C76.41799926757812,-50 80,-46.417999267578125 80,-42 C80,-42 80,42 80,42 C80,46.417999267578125 76.41799926757812,50 72,50 C72,50 -72,50 -72,50 C-76.41799926757812,50 -80,46.417999267578125 -80,42 C-80,42 -80,-42 -80,-42 C-80,-46.417999267578125 -76.41799926757812,-50 -72,-50z"
              fillOpacity={0}
              stroke="rgb(25,0,82)"
              strokeLinecap="butt"
              strokeLinejoin="miter"
              strokeMiterlimit={4}
              strokeOpacity={1}
              strokeWidth={2}
            />
          </g>
        </g>
      </g>
      <g
        className="loading-element loading-bounce"
        clipPath="url(#__lottie_element_54)"
        opacity={1}
        style={{
          display: "block",
        }}
        transform="matrix(1,0,0,1,14,23.24319839477539)"
      >
        <g
          className="icon-color-primary"
          opacity={0.7000000000000001}
          style={{
            display: "block",
          }}
          transform="matrix(1,0,0,1,0,0)"
        >
          <g opacity={1} transform="matrix(1,0,0,1,75,17.16699981689453)">
            <path
              className="icon-color-primary"
              d=" M-57.5,-12.5 C-57.5,-12.5 57.5,-12.5 57.5,-12.5 C64.40399932861328,-12.5 70,-6.9039998054504395 70,0 C70,6.9039998054504395 64.40399932861328,12.5 57.5,12.5 C57.5,12.5 -57.5,12.5 -57.5,12.5 C-64.40399932861328,12.5 -70,6.9039998054504395 -70,0 C-70,-6.9039998054504395 -64.40399932861328,-12.5 -57.5,-12.5z"
              fill="rgb(71,0,235)"
              fillOpacity={1}
            />
          </g>
        </g>
        <g
          opacity={1}
          style={{
            display: "block",
          }}
          transform="matrix(1,0,0,1,0,0)"
        >
          <g opacity={1} transform="matrix(1,0,0,1,75,17.16699981689453)">
            <path
              className="icon-color-stroke"
              d=" M-57.5,-12.5 C-57.5,-12.5 57.5,-12.5 57.5,-12.5 C64.40399932861328,-12.5 70,-6.9039998054504395 70,0 C70,6.9039998054504395 64.40399932861328,12.5 57.5,12.5 C57.5,12.5 -57.5,12.5 -57.5,12.5 C-64.40399932861328,12.5 -70,6.9039998054504395 -70,0 C-70,-6.9039998054504395 -64.40399932861328,-12.5 -57.5,-12.5z"
              fillOpacity={0}
              stroke="rgb(25,0,82)"
              strokeLinecap="butt"
              strokeLinejoin="miter"
              strokeMiterlimit={10}
              strokeOpacity={1}
              strokeWidth={2}
            />
          </g>
        </g>
      </g>
    </g>
  </svg>
);

interface KycStepLoadingProps {
  validationSteps?: ValidationStep[];
  currentStep?: string;
  onValidationComplete?: (
    success: boolean,
    validationErrors?: any[],
    extractedData?: any,
  ) => void;
  kycFormData?: {
    firstName: string;
    lastName: string;
    identityNumber: string;
    birthdate: Date | undefined;
    applicantId?: string;
  };
}

export default function KycStepLoading({
  validationSteps = [],
  currentStep,
  onValidationComplete,
  kycFormData,
}: KycStepLoadingProps) {
  const defaultSteps: ValidationStep[] = [
    { id: "identity", label: "Verifying identity document", status: "pending" },
    { id: "name", label: "Checking name information", status: "pending" },
    { id: "address", label: "Validating address details", status: "pending" },
    { id: "photos", label: "Processing document photos", status: "pending" },
    { id: "final", label: "Final verification", status: "pending" },
  ];

  const steps = validationSteps.length > 0 ? validationSteps : defaultSteps;
  const [localSteps, setLocalSteps] = useState<ValidationStep[]>(steps);

  useEffect(() => {
    if (onValidationComplete && kycFormData) {
      const performValidation = async () => {
        const applicantId = localStorage.getItem("sumsubApplicantId");

        if (!applicantId) {
          onValidationComplete(false, [], {});

          return;
        }

        try {
          setLocalSteps((prev) =>
            prev.map((step) =>
              step.id === "identity" ? { ...step, status: "checking" } : step,
            ),
          );

          const { kycService } = await import("@/services/kyc.service");

          await new Promise((resolve) => setTimeout(resolve, 2000));

          const statusCheck = await kycService.sumsub.checkKycStatusAndRedirect(
            applicantId,
            kycFormData,
          );

          setLocalSteps((prev) =>
            prev.map((step) =>
              step.id === "identity"
                ? { ...step, status: "completed" }
                : step.id === "name"
                  ? { ...step, status: "checking" }
                  : step,
            ),
          );

          await new Promise((resolve) => setTimeout(resolve, 1500));

          setLocalSteps((prev) =>
            prev.map((step) =>
              step.id === "name"
                ? { ...step, status: "completed" }
                : step.id === "address"
                  ? { ...step, status: "checking" }
                  : step,
            ),
          );

          await new Promise((resolve) => setTimeout(resolve, 1500));

          setLocalSteps((prev) =>
            prev.map((step) =>
              step.id === "address"
                ? { ...step, status: "completed" }
                : step.id === "photos"
                  ? { ...step, status: "checking" }
                  : step,
            ),
          );

          await new Promise((resolve) => setTimeout(resolve, 1500));

          setLocalSteps((prev) =>
            prev.map((step) =>
              step.id === "photos"
                ? { ...step, status: "completed" }
                : step.id === "final"
                  ? { ...step, status: "checking" }
                  : step,
            ),
          );

          await new Promise((resolve) => setTimeout(resolve, 2000));

          if (statusCheck.shouldRedirect) {
            if (statusCheck.redirectTo === "success") {
              setLocalSteps((prev) =>
                prev.map((step) =>
                  step.id === "final" ? { ...step, status: "completed" } : step,
                ),
              );

              await new Promise((resolve) => setTimeout(resolve, 1000));
              onValidationComplete(true, [], statusCheck.extractedData);
            } else if (statusCheck.redirectTo === "failed") {
              setLocalSteps((prev) =>
                prev.map((step) =>
                  step.id === "final" ? { ...step, status: "failed" } : step,
                ),
              );

              await new Promise((resolve) => setTimeout(resolve, 1000));
              onValidationComplete(
                false,
                statusCheck.validationErrors || [],
                statusCheck.extractedData,
              );
            }
          } else {
            setLocalSteps((prev) =>
              prev.map((step) =>
                step.id === "final" ? { ...step, status: "failed" } : step,
              ),
            );

            await new Promise((resolve) => setTimeout(resolve, 1000));
            onValidationComplete(false, [], {});
          }
        } catch {
          setLocalSteps((prev) =>
            prev.map((step) =>
              step.status === "checking" ? { ...step, status: "failed" } : step,
            ),
          );

          await new Promise((resolve) => setTimeout(resolve, 1000));
          onValidationComplete(false, [], {});
        }
      };

      performValidation();
    }
  }, [onValidationComplete, kycFormData]);

  return (
    <div className="flex flex-col gap-5 w-full max-w-md">
      <div className="flex flex-col gap-5">
        <span className="text-black text-2xl font-semibold">Processing ID</span>
        <div className="flex flex-col gap-5">
          <p className="text-sm">
            Please wait as we validate your information against the submitted
            documents.
          </p>

          <div className="w-full flex items-center justify-center">
            <CardLoading />
          </div>

          <div className="space-y-3">
            {localSteps.map((step) => {
              const isCurrentStep = currentStep === step.id;
              const isCompleted = step.status === "completed";
              const isFailed = step.status === "failed";
              const isChecking = step.status === "checking" || isCurrentStep;

              return (
                <div key={step.id} className="flex items-center gap-3">
                  <div
                    className={`w-4 h-4 rounded-full flex items-center justify-center ${
                      isCompleted
                        ? "bg-green-500"
                        : isFailed
                          ? "bg-red-500"
                          : isChecking
                            ? "bg-blue-500 animate-pulse"
                            : "bg-gray-300"
                    }`}
                  >
                    {isCompleted && (
                      <svg
                        className="w-2.5 h-2.5 text-white"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                      >
                        <path
                          clipRule="evenodd"
                          d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                          fillRule="evenodd"
                        />
                      </svg>
                    )}
                    {isFailed && (
                      <svg
                        className="w-2.5 h-2.5 text-white"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                      >
                        <path
                          clipRule="evenodd"
                          d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                          fillRule="evenodd"
                        />
                      </svg>
                    )}
                  </div>

                  <span
                    className={`text-sm ${
                      isCompleted
                        ? "text-green-600"
                        : isFailed
                          ? "text-red-600"
                          : isChecking
                            ? "text-blue-600 font-medium"
                            : "text-gray-500"
                    }`}
                  >
                    {step.label}
                    {isChecking && "..."}
                  </span>

                  {isChecking && !isCompleted && !isFailed && (
                    <div className="w-3 h-3 border-2 border-blue-500 border-t-transparent rounded-full animate-spin ml-auto" />
                  )}
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
}
