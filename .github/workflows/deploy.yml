name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy and Update PM2
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script_stop: true
          script: |
            set -e
            cd ${{ secrets.DEPLOY_PATH || '/home/kizovps/idrc/frontend' }}
            
            echo "=========================================="
            echo "üöÄ Deployment Started"
            echo "=========================================="
            
            # Setup environment - Load NVM and ensure Node/pnpm/pm2 are available
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            # Add pnpm to PATH if not available
            export PNPM_HOME="$HOME/.local/share/pnpm"
            export PATH="$PNPM_HOME:$PATH"
            
            echo "üìç Current directory: $(pwd)"
            echo "üîß Node version: $(node --version)"
            echo "üì¶ pnpm version: $(pnpm --version)"
            echo "‚öôÔ∏è  PM2 version: $(pm2 --version)"
            echo ""
            
            # Step 1: Pull latest changes from Git
            echo "[1/6] üì• Pulling latest changes..."
            git fetch origin
            BEFORE_COMMIT=$(git rev-parse HEAD)
            git pull origin main
            AFTER_COMMIT=$(git rev-parse HEAD)
            
            if [ "$BEFORE_COMMIT" = "$AFTER_COMMIT" ]; then
              echo "‚úì No new changes detected (already up to date)"
            else
              echo "‚úì Code updated from $BEFORE_COMMIT to $AFTER_COMMIT"
            fi
            echo ""
            
            # Step 2: Install dependencies
            echo "[2/6] üì¶ Installing dependencies..."
            pnpm install --frozen-lockfile
            echo "‚úì Dependencies installed"
            echo ""
            
            # Step 3: Build application
            echo "[3/6] üî® Building application..."
            pnpm build
            echo "‚úì Build completed successfully"
            echo ""
            
            # Step 4: Reload PM2 (graceful reload for zero-downtime)
            echo "[4/6] üîÑ Reloading PM2 application..."
            
            # Check if process exists
            if pm2 describe idrc-frontend > /dev/null 2>&1; then
              echo "Found existing PM2 process, performing reload..."
              pm2 reload idrc-frontend --update-env
              echo "‚úì PM2 process reloaded"
            else
              echo "PM2 process not found, starting new process..."
              pm2 start pnpm --name "idrc-frontend" -- start
              echo "‚úì PM2 process started"
            fi
            echo ""
            
            # Step 5: Save PM2 process list
            echo "[5/6] üíæ Saving PM2 configuration..."
            pm2 save --force
            echo "‚úì PM2 configuration saved"
            echo ""
            
            # Step 6: Verify deployment
            echo "[6/6] ‚úÖ Verifying deployment..."
            sleep 3
            
            # Check PM2 status and show detailed info
            PM2_STATUS=$(pm2 jlist 2>/dev/null | jq -r '.[] | select(.name=="idrc-frontend") | .pm2_env.status' 2>/dev/null || echo "unknown")
            
            if [ "$PM2_STATUS" = "online" ]; then
              echo "‚úÖ Deployment successful!"
              echo ""
              echo "üìä Application Status:"
              pm2 show idrc-frontend | grep -E "(status|uptime|restarts|memory|cpu)" | head -6
            else
              echo "‚ùå Deployment verification failed - Status: $PM2_STATUS"
              echo "üìã Checking PM2 logs for errors..."
              pm2 logs idrc-frontend --lines 20 --nostream
              exit 1
            fi
            
            echo ""
            echo "=========================================="
            echo "‚úÖ Deployment Complete"
            echo "=========================================="

  notify:
    name: Notify Status
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Success
        if: needs.deploy.result == 'success'
        run: echo "‚úÖ Deployment successful - Application is live!"
          
      - name: Failed
        if: needs.deploy.result != 'success'
        run: |
          echo "‚ùå Deployment failed - Check logs for details"
          exit 1
